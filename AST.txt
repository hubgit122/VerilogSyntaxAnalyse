AST 设计
节点类型: 语句, 表达式
几乎每个节点都可以有一个延时标记(#xx)

语句: assign, always(三种形式: 时序,组合或延时. 触发条件用"or"或","连接), initial, if-else, if, case, for,
	begin-end块, fork-join块, 声明语句(wire, reg, module, function, task, parameter), 表达式语句, task调用语句, 模块例化
	预处理语句(仅支持include和timescale的识别)    //注意: 有一部分"表达式语句"在Verilog里没有意义.
表达式: 立即数(默认32位宽, 指定位宽, ), 信号, 信号拼接, 宏标记, 算术表达式, 函数调用,

目标:整理代码
-- [按块缩进]   不同的层次需要有不同的缩进, 用"语句块"来组织缩进层次.
-- [声明顺序]   为了基本保证先定义再使用, 整理模块内声明顺序: parameter, 端口, integer等变量, wire, reg, 模块例化, function, task, assign, always块.
-- [对齐和空格] 赋值号, 分号, 端口声明处的端口名, 位宽, 逗号
-- [reg整理]    一个always块内仅放置一个reg

整理方式:
-- [按块缩进]   每个不同的块新建一个数据结构来管理各域的宽度. 缩进层次是一个继承属性.
-- [声明顺序]   每种声明语句分配一个线性表数据结构(xxlist), 语法分析时将相应的语句按顺序放入这些语句,
                将不同的list按顺序输出
-- [对齐和空格] 管理每种元素的最大宽度(以4的倍数计), 每个相应的语句保留每个成分的字面值, 不做其余处理.

对以上三个目标的总体解决方案:



-- [reg整理]    为每个声明的reg管理一个赋值条件-表达式表,
                所有的赋值语句必须来自于同一个always块(尽管这个always块可能也包含别的reg的赋值),
                这是单驱动条件. 在此条件下, 在每个if-else或case分支中有赋值.
                在语法分析完全结束之后, 开始reg信号的整理, 如果一个分支中有多个赋值, 保留并报warning.